Tworzona biblioteka będzie pozwalać na uruchomiene demona obsługującego          
nadchodzące logi zarówno z lokalnego systemu przy użyciu unix sockets, jak i     
przez sieć nasłuchując na wybranym porcie. Zezwoli ona także na wysyłanie        
komunikatów do lokalnego demona obsługującego logi lub do zdalnego dostępnego    
w sieci.                                                                         
                                                                                 
Biblioteka będzie definiować także klasę standaryzującą przesyłane logi. Będzie  
ona zawierać priorytet, który pozwoli on np. na dzielenie logów na różne pliki   
zależnie od tego czy to np. błędy, ostrzeżenia czy informacje, oprócz tego       
zawierać ona będzie prefix, którym poprzedzona będzie wiadomość co pozwoli       
na identyfikację źródła komunikatu i oczywiście samą jego treść.                 
                                                                                 
Projekt będzie się też składał z przykładowego programu serwera, który będzie    
zbierał logi zarówno z maszyny lokalnej jak i zdalnych przez sieć. Oprócz tego   
programu, który będzie zbierał informacje o temperaturze danej maszyny i         
przekazywał je do loggera, a także programu, który znajdował się będzie na       
zdalnej maszynie i przez sieć będzie przekazywał informacje o stanie naładowania 
akumulatora maszyny zewnętrznej.                                                 
                                                                                 
Logi zebrane przez serwer będzie można przejrzeć w katalogu zdefiniowanym w pliku
konfiguracyjnym serwera w plikach o nazwach zależnych od konfiguracji.           
Dopuszczalne będą dwa tryby nazwa pliku to prefiks, lub nazwa pliku to priorytet.
Oprócz tego plik konfiguracyjny pozwoli zdefiniować port, na którym logger będzie
nasłuchiwać komunikatów przychodzących z sieci. 

Zestaw trzech programów powinien pozwolić skutecznie zademenstrować możliwości
projektowanej biblioteki

klasa logmsg
    private:
        int priorytet
        string prefix
        string msg
        string checksum

    public:
        konstruktor()
        konstruktor(enum prior, string prefix, string msg)
        void ustawPriorytet(enum prior)
        void ustawPrefix(string prefix)
        void ustawWiadomosc(string msg)
        enum pobierzPriorytet()
        string pobierzPrefix()
        string pobierzWiadomosc()
        string DrukujLog()
        int obliczSume()

klasa LogServer
    private:
        int remotePort
        string localFile
        string logPath

    public:
        void setRemotePort(int port)
        void setLocalSocket(string filename)
        int startLocalListener()
        int startRemoteListener()
        int stopLocalListener()
        int stopRemoteListener()
        void setLogPath()

